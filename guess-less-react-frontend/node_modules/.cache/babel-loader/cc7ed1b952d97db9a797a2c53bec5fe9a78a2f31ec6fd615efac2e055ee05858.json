{"ast":null,"code":"var _jsxFileName = \"/Users/yb97/Desktop/ProgrammingStuff/Github/guess-less/guess-less-react-frontend/src/components/misc/Timer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Timer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = ({\n  initialCount = 60\n}) => {\n  _s();\n  const [count, setCount] = useState(initialCount);\n  useEffect(() => {\n    // Exit early when we reach 0\n    if (count <= 0) {\n      console.log('Timer finished');\n      // Here you can trigger any action after the countdown finishes\n      return;\n    }\n\n    // Save intervalId to clear the interval when the\n    // component re-renders or unmounts\n    const intervalId = setInterval(() => {\n      setCount(count - 1);\n    }, 1000);\n\n    // Clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n    // Add count as a dependency to re-run the effect when it changes\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"clock-display\",\n    children: count\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(CountdownTimer, \"18idaTG5j8Oq7NBoHFR8v08RZCM=\");\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CountdownTimer","initialCount","_s","count","setCount","console","log","intervalId","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yb97/Desktop/ProgrammingStuff/Github/guess-less/guess-less-react-frontend/src/components/misc/Timer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Timer.css';\n\nconst CountdownTimer = ({ initialCount = 60 }) => {\n  const [count, setCount] = useState(initialCount);\n\n  useEffect(() => {\n    // Exit early when we reach 0\n    if (count <= 0) {\n      console.log('Timer finished');\n      // Here you can trigger any action after the countdown finishes\n      return;\n    }\n\n    // Save intervalId to clear the interval when the\n    // component re-renders or unmounts\n    const intervalId = setInterval(() => {\n      setCount(count - 1);\n    }, 1000);\n\n    // Clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n    // Add count as a dependency to re-run the effect when it changes\n  }, [count]);\n\n  return (\n    <div className=\"clock-display\">\n     {count}\n     \n    </div>\n\n    \n    \n  );\n};\n\nexport default CountdownTimer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,cAAc,GAAGA,CAAC;EAAEC,YAAY,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACK,YAAY,CAAC;EAEhDJ,SAAS,CAAC,MAAM;IACd;IACA,IAAIM,KAAK,IAAI,CAAC,EAAE;MACdE,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B;MACA;IACF;;IAEA;IACA;IACA,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnCJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;;IAER;IACA,OAAO,MAAMM,aAAa,CAACF,UAAU,CAAC;IACtC;EACF,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEX,oBACEJ,OAAA;IAAKW,SAAS,EAAC,eAAe;IAAAC,QAAA,EAC5BR;EAAK;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEF,CAAC;AAKV,CAAC;AAACb,EAAA,CA/BIF,cAAc;AAAAgB,EAAA,GAAdhB,cAAc;AAiCpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}