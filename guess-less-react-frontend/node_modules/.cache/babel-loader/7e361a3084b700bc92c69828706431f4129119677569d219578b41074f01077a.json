{"ast":null,"code":"var _jsxFileName = \"/home/yacbln/guess-less-project/src/components/CreateSessionPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateSessionPage = () => {\n  _s();\n  const history = useNavigate();\n  const generateSessionId = () => {\n    // Generate a random alphanumeric string for the session ID\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const sessionIdLength = 8;\n    let sessionId = '';\n    for (let i = 0; i < sessionIdLength; i++) {\n      sessionId += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return sessionId;\n  };\n  const handleCreateSession = () => {\n    const sessionId = generateSessionId();\n    console.log(sessionId);\n\n    // Implement logic to create a new session\n    // For now, let's assume you have an API endpoint for creating sessions\n    // You may replace this with your actual API endpoint\n    // fetch('/api/create-session', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ sessionId }), // Sending sessionId to the server\n    // })\n    //   .then(response => {\n    //     if (response.ok) {\n    //       return response.json();\n    //     }\n    //     throw new Error('Failed to create session');\n    //   })\n    //   .then(data => {\n    //     // Redirect to the created session\n    //     history.push(`/session/${data.sessionId}`);\n    //   })\n    //   .catch(error => {\n    //     console.error('Error creating session:', error);\n    //     // Handle error\n    //   });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create a New Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateSession,\n      children: \"Create Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateSessionPage, \"UuBpJaL/77ixlr0CeL0xEoy8mog=\", false, function () {\n  return [useNavigate];\n});\n_c = CreateSessionPage;\nexport default CreateSessionPage;\nvar _c;\n$RefreshReg$(_c, \"CreateSessionPage\");","map":{"version":3,"names":["React","useNavigate","jsxDEV","_jsxDEV","CreateSessionPage","_s","history","generateSessionId","characters","sessionIdLength","sessionId","i","charAt","Math","floor","random","length","handleCreateSession","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/yacbln/guess-less-project/src/components/CreateSessionPage.js"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst CreateSessionPage = () => {\n  const history = useNavigate();\n\n  const generateSessionId = () => {\n    // Generate a random alphanumeric string for the session ID\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const sessionIdLength = 8;\n    let sessionId = '';\n    for (let i = 0; i < sessionIdLength; i++) {\n      sessionId += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return sessionId;\n  };\n\n  const handleCreateSession = () => {\n    const sessionId = generateSessionId();\n    console.log(sessionId)\n\n    // Implement logic to create a new session\n    // For now, let's assume you have an API endpoint for creating sessions\n    // You may replace this with your actual API endpoint\n    // fetch('/api/create-session', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify({ sessionId }), // Sending sessionId to the server\n    // })\n    //   .then(response => {\n    //     if (response.ok) {\n    //       return response.json();\n    //     }\n    //     throw new Error('Failed to create session');\n    //   })\n    //   .then(data => {\n    //     // Redirect to the created session\n    //     history.push(`/session/${data.sessionId}`);\n    //   })\n    //   .catch(error => {\n    //     console.error('Error creating session:', error);\n    //     // Handle error\n    //   });\n  };\n\n  return (\n    <div>\n      <h2>Create a New Session</h2>\n      <button onClick={handleCreateSession}>Create Session</button>\n    </div>\n  );\n};\n\nexport default CreateSessionPage;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,OAAO,GAAGL,WAAW,CAAC,CAAC;EAE7B,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,UAAU,GAAG,gEAAgE;IACnF,MAAMC,eAAe,GAAG,CAAC;IACzB,IAAIC,SAAS,GAAG,EAAE;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,eAAe,EAAEE,CAAC,EAAE,EAAE;MACxCD,SAAS,IAAIF,UAAU,CAACI,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,UAAU,CAACQ,MAAM,CAAC,CAAC;IAC/E;IACA,OAAON,SAAS;EAClB,CAAC;EAED,MAAMO,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMP,SAAS,GAAGH,iBAAiB,CAAC,CAAC;IACrCW,OAAO,CAACC,GAAG,CAACT,SAAS,CAAC;;IAEtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EAED,oBACEP,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BrB,OAAA;MAAQsB,OAAO,EAAER,mBAAoB;MAAAG,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEV,CAAC;AAACnB,EAAA,CAlDID,iBAAiB;EAAA,QACLH,WAAW;AAAA;AAAAyB,EAAA,GADvBtB,iBAAiB;AAoDvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}