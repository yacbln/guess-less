{"ast":null,"code":"var _jsxFileName = \"/home/yacbln/guess-less-project/guess-less-frontend/src/components/JoinSessionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JoinSessionPage = () => {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const history = useNavigate();\n  const handleJoinSession = () => {\n    // Implement logic to join an existing session\n    // For now, let's assume you have an API endpoint for joining sessions\n    // You may replace this with your actual API endpoint\n    fetch(`/api/join-session/${sessionId}`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      throw new Error('Failed to join session');\n    }).then(data => {\n      // Redirect to the joined session\n      history.push(`/session/${data.sessionId}`);\n    }).catch(error => {\n      console.error('Error joining session:', error);\n      // Handle error\n    });\n  };\n  const joinSession = sessionId => {\n    sendMessage({\n      type: 'join_session',\n      sessionId\n    });\n  };\n  const handleInputChange = event => {\n    setSessionId(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Join an Existing Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter session ID\",\n      value: sessionId,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleJoinSession,\n      children: \"Join Session\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(JoinSessionPage, \"fQTdxWlXcxCkfuJKg6hY+BS/0ls=\", false, function () {\n  return [useNavigate];\n});\n_c = JoinSessionPage;\nexport default JoinSessionPage;\nvar _c;\n$RefreshReg$(_c, \"JoinSessionPage\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","JoinSessionPage","_s","sessionId","setSessionId","history","handleJoinSession","fetch","then","response","ok","json","Error","data","push","catch","error","console","joinSession","sendMessage","type","handleInputChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/home/yacbln/guess-less-project/guess-less-frontend/src/components/JoinSessionPage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst JoinSessionPage = () => {\n  const [sessionId, setSessionId] = useState('');\n  const history = useNavigate();\n\n  const handleJoinSession = () => {\n    // Implement logic to join an existing session\n    // For now, let's assume you have an API endpoint for joining sessions\n    // You may replace this with your actual API endpoint\n    fetch(`/api/join-session/${sessionId}`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        throw new Error('Failed to join session');\n      })\n      .then(data => {\n        // Redirect to the joined session\n        history.push(`/session/${data.sessionId}`);\n      })\n      .catch(error => {\n        console.error('Error joining session:', error);\n        // Handle error\n      });\n  };\n\n  const joinSession = (sessionId) => {\n    sendMessage({ type: 'join_session', sessionId });\n};\n\n\n  const handleInputChange = event => {\n    setSessionId(event.target.value);\n  };\n\n  return (\n    <div>\n      <h2>Join an Existing Session</h2>\n      <input\n        type=\"text\"\n        placeholder=\"Enter session ID\"\n        value={sessionId}\n        onChange={handleInputChange}\n      />\n      <button onClick={handleJoinSession}>Join Session</button>\n    </div>\n  );\n};\n\nexport default JoinSessionPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMQ,OAAO,GAAGP,WAAW,CAAC,CAAC;EAE7B,MAAMQ,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA;IACA;IACAC,KAAK,CAAE,qBAAoBJ,SAAU,EAAC,CAAC,CACpCK,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB;MACA,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZ;MACAR,OAAO,CAACS,IAAI,CAAE,YAAWD,IAAI,CAACV,SAAU,EAAC,CAAC;IAC5C,CAAC,CAAC,CACDY,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC,CAAC;EACN,CAAC;EAED,MAAME,WAAW,GAAIf,SAAS,IAAK;IACjCgB,WAAW,CAAC;MAAEC,IAAI,EAAE,cAAc;MAAEjB;IAAU,CAAC,CAAC;EACpD,CAAC;EAGC,MAAMkB,iBAAiB,GAAGC,KAAK,IAAI;IACjClB,YAAY,CAACkB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,oBACExB,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjC7B,OAAA;MACEoB,IAAI,EAAC,MAAM;MACXU,WAAW,EAAC,kBAAkB;MAC9BN,KAAK,EAAErB,SAAU;MACjB4B,QAAQ,EAAEV;IAAkB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACF7B,OAAA;MAAQgC,OAAO,EAAE1B,iBAAkB;MAAAmB,QAAA,EAAC;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA9CID,eAAe;EAAA,QAEHH,WAAW;AAAA;AAAAmC,EAAA,GAFvBhC,eAAe;AAgDrB,eAAeA,eAAe;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}